openapi: 3.0.1
info:
  version: 1.0.0
  title: cometosite - Backend Service
  license:
    name: cometosite
servers:
  - url: 'http://localhost:3000'
paths:
  /api/v1/users:
    get:
      summary: List or search users
      description: >-
        Retrieve a list of users. With this endpoint it is possible to specify a
        search criteria for users (q, page, per_page)
      tags:
        - User
      security:
        - OAuth2: []
        - OpenId: []
        - BearerAuth: []
      parameters:
        - in: query
          name: q
          schema:
            type: string
          required: false
          description: >-
            The q query parameter can be used to get users that match the
            specified criteria.
          example: 'name:"jonh smith"'
        - in: query
          name: per_page
          schema:
            type: integer
          required: false
          description: The amount of entries per page. Max value 100. Default value 50
          example: 50
        - in: query
          name: page
          schema:
            type: integer
          required: false
          description: The page number. Zero based
          example: 0
      responses:
        '200':
          description: User List
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountResponseBody'
    post:
      summary: Creates a new user
      description: >-
        Creates a new user according to the JSON object received in body. It
        works only for database and passwordless connections.
      tags:
        - User
      security:
        - OAuth2: []
        - OpenId: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountRequestBody'
      responses:
        '200':
          description: User Info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponseBody'
        '400':
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/v1/users/{user_id}':
    get:
      summary: Get a user
      description: This endpoint can be used to retrieve user details given the user_id.
      tags:
        - User
      security:
        - OAuth2: []
        - OpenId: []
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          schema:
            type: number
          required: true
          description: The id of the user to retrieve
          example: 1
        - in: query
          name: connection_id
          schema:
            type: string
          required: true
          description: Connection which should be used
          example: cs_portal
      responses:
        '200':
          description: User Info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponseBody'
        '400':
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a user
      description: This endpoint can be used to delete a single user based on the id
      tags:
        - User
      security:
        - OAuth2: []
        - OpenId: []
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          schema:
            type: number
          required: true
          description: The id of the user to delete
          example: 1
        - in: query
          name: connection_id
          schema:
            type: string
          required: true
          description: Connection which should be used
          example: cs_portal
      responses:
        '200':
          description: Success Response
        '400':
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update a user
      description: >-
        Updates a user with the object's properties received in the request's
        body
      tags:
        - User
      security:
        - OAuth2: []
        - OpenId: []
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The id of the user to delete
          example: 1
        - in: path
          name: user_id
          schema:
            type: number
          required: true
          description: The id of the user to delete
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountRequestBody'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponseBody'
        '400':
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/users-by-email:
    get:
      summary: Search users by email or user_id
      description: >-
        The search looks for an exact match to the provided email address and is
        case-sensitive.
      tags:
        - User
      security:
        - OAuth2: []
        - OpenId: []
        - BearerAuth: []
      parameters:
        - in: query
          name: email
          schema:
            type: string
          description: The email address
          example: john@gmail.com
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountResponseBody'
  /api/v1/jobs/users-imports:
    post:
      summary: Import users
      description: >-
        The search looks for an exact match to the provided email address and is
        case-sensitive.
      tags:
        - User
      security:
        - OAuth2: []
        - OpenId: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                connection_id:
                  type: string
                  description: database connection
                  example: hsbc
                users:
                  description: file
                  type: string
                  format: binary
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SucessResponse'
        '400':
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/v2/clients/{clientId}/users':
    get:
      summary: List or search users
      description: >-
        Retrieve a list of users. With this endpoint it is possible to specify a
        search criteria for users (q, page, per_page)
      tags:
        - UserV2
      security:
        - OAuth2: []
        - OpenId: []
        - BearerAuth: []
      parameters:
        - in: path
          name: clientId
          schema:
            type: string
          required: true
          description: CXA Client ~ value of connection_id params in V1
          example: hsbc
        - in: query
          name: q
          schema:
            type: string
          required: false
          description: >-
            The q query parameter can be used to get users that match the
            specified criteria.
          example: 'name:"jonh smith"'
        - in: query
          name: per_page
          schema:
            type: integer
          required: false
          description: The amount of entries per page. Max value 100. Default value 50
          example: 50
        - in: query
          name: page
          schema:
            type: integer
          required: false
          description: The page number. Zero based
          example: 0
      responses:
        '200':
          description: User List
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountResponseBody'
    post:
      summary: Creates a new user
      description: >-
        Creates a new user according to the JSON object received in body. It
        works only for database and passwordless connections.
      tags:
        - UserV2
      parameters:
        - in: path
          name: clientId
          schema:
            type: string
          required: true
          description: CXA Client ~ value of connection_id params in V1
          example: hsbc
      security:
        - OAuth2: []
        - OpenId: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountV2Body'
      responses:
        '200':
          description: User Info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponseBody'
        '400':
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/v2/clients/{clientId}/users/{userId}':
    get:
      summary: Get a user
      description: This endpoint can be used to retrieve user details given the userId.
      tags:
        - UserV2
      security:
        - OAuth2: []
        - OpenId: []
        - BearerAuth: []
      parameters:
        - in: path
          name: clientId
          schema:
            type: string
          required: true
          description: CXA Client ~ value of connection_id params in V1
          example: hsbc
        - in: path
          name: userId
          schema:
            type: number
          required: true
          description: The id of the user to retrieve
          example: 1
      responses:
        '200':
          description: User Info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponseBody'
        '400':
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a user
      description: This endpoint can be used to delete a single user based on the id
      tags:
        - UserV2
      security:
        - OAuth2: []
        - OpenId: []
        - BearerAuth: []
      parameters:
        - in: path
          name: clientId
          schema:
            type: string
          required: true
          description: CXA Client ~ value of connection_id params in V1
          example: hsbc
        - in: path
          name: userId
          schema:
            type: number
          required: true
          description: The id of the user to delete
          example: 1
      responses:
        '200':
          description: Success Response
        '400':
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update a user
      description: >-
        Updates a user with the object's properties received in the request's
        body
      tags:
        - UserV2
      security:
        - OAuth2: []
        - OpenId: []
        - BearerAuth: []
      parameters:
        - in: path
          name: clientId
          schema:
            type: string
          required: true
          description: CXA Client ~ value of connection_id params in V1
          example: hsbc
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: The id of the user to delete
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountV2Body'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponseBody'
        '400':
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/v2/clients/{clientId}/users-by-email':
    get:
      summary: Search users by email or userId
      description: >-
        The search looks for an exact match to the provided email address and is
        case-sensitive.
      tags:
        - UserV2
      security:
        - OAuth2: []
        - OpenId: []
        - BearerAuth: []
      parameters:
        - in: path
          name: clientId
          schema:
            type: string
          required: true
          description: CXA Client ~ value of connection_id params in V1
          example: hsbc
        - in: query
          name: email
          schema:
            type: string
          description: The email address
          example: john@gmail.com
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountResponseBody'
  '/api/v2/clients/{clientId}/jobs/users-imports':
    post:
      summary: Import users
      description: >-
        The search looks for an exact match to the provided email address and is
        case-sensitive.
      tags:
        - UserV2
      security:
        - OAuth2: []
        - OpenId: []
        - BearerAuth: []
      parameters:
        - in: path
          name: clientId
          schema:
            type: string
          required: true
          description: CXA Client ~ value of connection_id params in V1
          example: hsbc
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                users:
                  description: file
                  type: string
                  format: binary
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SucessResponse'
        '400':
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/v2/clients/{clientId}/users/{userId}/emails':
    patch:
      summary: Update user emails
      description: >-
        Updates user emails with the object's properties received in the
        request's body
      tags:
        - UserV2
      security:
        - OAuth2: []
        - OpenId: []
        - BearerAuth: []
      parameters:
        - in: path
          name: clientId
          schema:
            type: string
          required: true
          description: CXA Client ~ value of connection_id params in V1
          example: hsbc
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: The id of the user to delete
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserEmailsV2Body'
      responses:
        '200':
          description: Response
        '400':
          description: Invalid email address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInvalidEmaillAddressResponse'
        '409':
          description: Email exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEmailExistsResponse'
components:
  schemas:
    OpenIDConfigurationResponseBody:
      type: object
      properties:
        authorization_endpoint:
          type: string
          example: 'http://localhost:5000/authorize'
        claims_parameter_supported:
          type: boolean
          example: false
        claims_supported:
          type: array
          items:
            type: string
          example:
            - sub
            - address
            - email
            - email_verified
            - phone_number
            - phone_number_verified
            - birthdate
            - family_name
            - gender
            - given_name
            - locale
            - middle_name
            - name
            - nickname
            - picture
            - preferred_username
            - profile
            - updated_at
            - website
            - zoneinfo
            - sid
            - auth_time
            - iss
        code_challenge_methods_supported:
          type: array
          items:
            type: string
          example:
            - S256
        end_session_endpoint:
          type: string
          example: 'http://localhost:5000/session/end'
        grant_types_supported:
          type: array
          items:
            type: string
          example:
            - implicit
            - authorization_code
            - refresh_token
            - 'urn:ietf:params:oauth:grant-type:device_code'
        id_token_signing_alg_values_supported:
          type: array
          items:
            type: string
          example:
            - HS256
            - PS256
            - RS256
        issuer:
          type: string
          example: 'http://localhost:5000'
        jwks_uri:
          type: string
          example: 'http://localhost:5000/jwks'
        registration_endpoint:
          type: string
          example: 'http://localhost:5000/reg'
        request_object_signing_alg_values_supported:
          type: array
          items:
            type: string
          example:
            - HS256
            - RS256
            - PS256
            - ES256
            - EdDSA
        request_parameter_supported:
          type: boolean
          example: false
        request_uri_parameter_supported:
          type: boolean
          example: true
        require_request_uri_registration:
          type: boolean
          example: true
        response_modes_supported:
          type: array
          items:
            type: string
          example:
            - form_post
            - fragment
            - query
        response_types_supported:
          type: array
          items:
            type: string
          example:
            - code id_token token
            - code id_token
            - code token
            - code
            - id_token token
            - id_token
            - token
            - none
        scopes_supported:
          type: array
          items:
            type: string
          example:
            - openid
            - offline_access
            - address
            - email
            - phone
            - profile
        subject_types_supported:
          type: array
          items:
            type: string
          example:
            - public
        token_endpoint_auth_methods_supported:
          type: array
          items:
            type: string
          example:
            - none
            - client_secret_basic
            - client_secret_jwt
            - client_secret_post
            - private_key_jwt
        token_endpoint_auth_signing_alg_values_supported:
          type: array
          items:
            type: string
          example:
            - HS256
            - RS256
            - PS256
            - ES256
            - EdDSA
        token_endpoint:
          type: string
          example: 'http://localhost:5000/token'
        userinfo_endpoint:
          type: string
          example: 'http://localhost:5000/me'
        userinfo_signing_alg_values_supported:
          type: array
          items:
            type: string
          example:
            - HS256
            - PS256
            - RS256
        introspection_endpoint:
          type: string
          example: 'http://localhost:5000/token/introspection'
        introspection_endpoint_auth_methods_supported:
          type: array
          items:
            type: string
          example:
            - none
            - client_secret_basic
            - client_secret_jwt
            - client_secret_post
            - private_key_jwt
        introspection_endpoint_auth_signing_alg_values_supported:
          type: array
          items:
            type: string
          example:
            - HS256
            - RS256
            - PS256
            - ES256
            - EdDSA
        revocation_endpoint:
          type: string
          example: 'http://localhost:5000/token/revocation'
        revocation_endpoint_auth_methods_supported:
          type: array
          items:
            type: string
          example:
            - none
            - client_secret_basic
            - client_secret_jwt
            - client_secret_post
            - private_key_jwt
        revocation_endpoint_auth_signing_alg_values_supported:
          type: array
          items:
            type: string
          example:
            - HS256
            - RS256
            - PS256
            - ES256
            - EdDSA
        device_authorization_endpoint:
          type: string
          example: 'http://localhost:5000/device/authorize'
        claim_types_supported:
          type: array
          items:
            type: string
          example:
            - normal
    GetTokenRequestBody:
      type: object
      properties:
        client_id:
          type: string
          description: Client ID
          example: client3
        client_secret:
          type: string
          description: Client secret
          example: my_secret_key
        username:
          type: string
          description: username for ROPG Flow
          example: test
        password:
          type: string
          description: password for ROPG Flow
          example: 123
        realm:
          type: string
          description: Database connection for ROPG Flow
          example: hsbc
        scope:
          type: string
          description: List of scopes
          example: openid profile
        redirect_uri:
          type: string
          description: Redirect URI
          example: 'https://oidcdebugger.com/debug'
        grant_type:
          type: string
          description: 'Grant type (`authorization_code`, `refresh_token`, `password`)'
          example: authorization_code
        code:
          type: string
          description: Authorization code
        refresh_token:
          type: string
          description: Refresh token
        connection:
          type: string
          description: Database connection
          example: hsbc
      required:
        - client_id
        - client_secret
        - redirect_uri
        - grant_type
    GetTokenResponseBody:
      type: object
      properties:
        access_token:
          type: string
          example: >-
            eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IlpuUVNMRnJZb0REQ1NGcVdDUEU4c1pENUpSSFZDU3BBNkFtY1FiQ2kzU1EifQ.eyJ1cm46b2lkYy1wcm92aWRlcjpleGFtcGxlOmZvbyI6ImJhciIsImp0aSI6ImlaWU8tTnVGX0FUd0Z6YlVFTHc3TSIsInN1YiI6InRlc3QiLCJpYXQiOjE1NjUyNDI4NDIsImV4cCI6MTU2NTI0NjQ0Miwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBvZmZsaW5lX2FjY2VzcyIsImlzcyI6Imh0dHA6Ly9sb2NhbGhvc3Q6MzAwMCIsImF1ZCI6InR3Y2xpZW50MyJ9.skh41IBEwzk0ZR_CJR0wdvyAvRSfvUrfwNwhkQAedtTJIBJ7QFIRPUI4ocCd3OH6aWk1YhZu4kmezTUC5VrFzwHpFao7Tqchi9WnU7ugLU9QNFxP2BnCb2Y_jmIajGrbokXHQr_khMIRYCshrQLR9CCfNQFQugWRH63gDbdR4yMs_2b2St2PrkQKg_onFAjwfoKXq7lXvwdwxNpHZamvIgJZkLYCzCT-3jipHYrdpdHG7XroTpNs60T4unbWaborZ7f9MUonNTWu9kiY7BasIoGhJnbo3B6O2ttmh2UM0cih_VU2zTKpHg_GALIZziTfFuU5sopRRh90LonO5PYrDg
        expires_in:
          type: number
          example: 3600
        id_token:
          type: string
          example: >-
            eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IlpuUVNMRnJZb0REQ1NGcVdDUEU4c1pENUpSSFZDU3BBNkFtY1FiQ2kzU1EifQ.eyJzdWIiOiJ0ZXN0Iiwibm9uY2UiOiIxMjMiLCJhdF9oYXNoIjoibnZQb0pLb094UXdoNDdWV0tPbVV3dyIsImF1ZCI6InR3Y2xpZW50MyIsImV4cCI6MTU2NTI0NjQ0MiwiaWF0IjoxNTY1MjQyODQyLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjMwMDAifQ.tT4uOFoaJRxZMs-etSsFh-dFNEfsCz0aPYBOLQwrmMUJUzdbZnjPVK5LCXdUJiuBNeyC8630q_6Fn82aTIVXHLRpHIpI4R4QE9_FIFQA3L2JEC_3UrX_chgiPQBWadaYbYPwhi9z2DHTGJLghFLwsxhHcpc_PIanuPj9htt7sIVNqY8kpPsqCRaK6vLSvgjlr4YgVR0rmu63hXWin807O6G5kvLGtsuMlmblpLzXogAYCNx6L7yuMhzcoXAtik7qNHo-JonhxxinabU8d3_-OMBazyaJpaq3BhdO5b6Htvh_xW9h9hmQj9ZMf64cSh_dkZL6rEsZArwhpMyB6_jPsQ
        refresh_token:
          type: string
          example: bX_45P93z7-3E7rKHkxvTqTOg2gJDj9KSedalWEkBFQ
        scope:
          type: string
          example: openid profile offline_access
        token_type:
          type: string
          example: Bearer
    CheckTokenRequestBody:
      type: object
      properties:
        client_id:
          type: string
          description: Client ID
          example: client3
        client_secret:
          type: string
          description: Client secret
          example: ...
        token:
          type: string
          description: Token
        token_type_hint:
          type: string
          description: 'Token type (`access_token`, `refresh_token`)'
          example: access_token
      required:
        - client_id
        - client_secret
        - token
        - token_type_hint
    CheckTokenResponseBody:
      type: object
      properties:
        active:
          type: boolean
        sub:
          type: string
          example: test
        client_id:
          type: string
          example: client3
        exp:
          type: number
          example: 1565246773
        iat:
          type: number
          example: 1565246773
        jti:
          type: string
          example: ikdpK8-1_YQFHs3IOgDcf
        scope:
          type: string
          example: openid profile offline_access
        token_type:
          type: string
          example: Bearer
    UserResponseBody:
      type: object
      properties:
        sub:
          type: string
          example: test
        birthdate:
          type: string
          example: '1987-10-16'
        family_name:
          type: string
          example: Doe
        gender:
          type: string
          example: male
        given_name:
          type: string
          example: John
        locale:
          type: string
          example: en-US
        middle_name:
          type: string
          example: Middle
        name:
          type: string
          example: John Doe
        nickname:
          type: string
          example: Johny
        picture:
          type: string
          example: 'http://lorempixel.com/400/200/'
        preferred_username:
          type: string
          example: johnny
        profile:
          type: string
          example: 'https://johnswebsite.com'
        updated_at:
          type: number
          example: 1454704946
        website:
          type: string
          example: 'http://example.com'
        zoneinfo:
          type: string
          example: Europe/Berlin
    AccountLogout:
      type: object
      properties:
        id_token_hint:
          type: string
          format: token
          description: jwt id token of related sessions
          example: jwt_id_token
        post_logout_redirect_uris:
          type: string
          format: url
          description: url to be redirected when logging out successfully
          example: 'https://example.com/post-logout'
    AccountRequestBody:
      type: object
      required:
        - email
        - connection
        - user_id
        - app_metadata
      properties:
        email:
          type: string
          format: email
          example: john.doe@gmail.com
          description: The user's email address
        secondary_email_address:
          type: string
          format: email
          example: john.doe@company.com
          description: The user's secondary email address
        name:
          type: string
          example: John Doe
          description: The user's name
        app_metadata:
          type: object
          properties:
            cxa_clientid:
              type: string
              example: identity-local
            role:
              type: string
              example: Admin
          description: The user's app meta data
        user_id:
          type: number
          example: 123
          description: The user's unique identifier from memberService
        password:
          type: string
          description: User's password
          example: secretpassword
        connection:
          type: string
          description: Determine which connection should be used
          example: cs_portal
    UpdateAccountRequestBody:
      type: object
      required:
        - connection
      properties:
        email:
          type: string
          format: email
          example: john.doe@company.com
          description: The user's email address
        secondary_email_address:
          type: string
          format: email
          example: john.doe@gmail.com
          description: The user's secondary email address
        phone:
          type: string
          example: '+84123456789'
          description: The user's phone number
        name:
          type: string
          example: John Doe
          description: The user's name
        app_metadata:
          type: object
          properties:
            cxa_clientid:
              type: string
              example: identity-local
            role:
              type: string
              example: Admin
          description: The user's app meta data
        password:
          type: string
          description: User's password
          example: secretpassword
        connection:
          type: string
          description: Determine which connection should be used
          example: cs_portal
        status:
          type: string
          description: User Status
          enum:
            - CREATED
            - VERIFIED
            - DEACTIVATED
            - ACTIVE
            - LOCKED
            - UNLOCKED
        limitedAccessUntil:
          type: string
          description: limited access until date (follow ISO 8601 format)
          example: '2020-03-12T23:59:59Z'
    CreateAccountV2Body:
      type: object
      required:
        - email
        - user_id
        - app_metadata
      properties:
        email:
          type: string
          format: email
          example: john.doe@company.com
          description: The user's primary email address
        secondary_email_address:
          type: string
          format: email
          example: john.doe@gmail.com
          description: The user's secondary email address
        name:
          type: string
          example: John Doe
          description: The user's name
        app_metadata:
          type: object
          properties:
            cxa_clientid:
              type: string
              example: identity-local
            role:
              type: string
              example: Admin
          description: The user's app meta data
        user_id:
          type: number
          example: 123
          description: The user's unique identifier from memberService
        password:
          type: string
          description: User's password
          example: secretpassword
    UpdateAccountV2Body:
      type: object
      required:
        - connection
      properties:
        email:
          type: string
          format: email
          example: john.doe@company.com
          description: The user's primary email address
        secondary_email_address:
          type: string
          format: email
          example: john.doe@gmail.com
          description: The user's secondary email address
        phone:
          type: string
          example: '+84123456789'
          description: The user's phone number
        name:
          type: string
          example: John Doe
          description: The user's name
        app_metadata:
          type: object
          properties:
            cxa_clientid:
              type: string
              example: identity-local
            role:
              type: string
              example: Admin
          description: The user's app meta data
        password:
          type: string
          description: User's password
          example: secretpassword
        status:
          type: string
          description: User Status
          enum:
            - CREATED
            - VERIFIED
            - DEACTIVATED
            - ACTIVE
            - LOCKED
            - UNLOCKED
        limitedAccessUntil:
          type: string
          description: limited access until date (follow ISO 8601 format)
          example: '2020-03-12T23:59:59Z'
    UpdateUserEmailsV2Body:
      type: object
      required:
        - connection
      properties:
        primary_email_address:
          type: string
          format: email
          example: john.doe@company.com
          description: The user's primary email address
        secondary_email_address:
          type: string
          format: email
          example: john.doe@gmail.com
          description: The user's secondary email address
    AccountResponseBody:
      type: object
      properties:
        id:
          type: number
          description: The user's ID
          example: 1
        email:
          type: string
          format: email
          example: john.doe@gmail.com
          description: The user's email address
        name:
          type: string
          example: John Doe
          description: The user's name
        user_id:
          type: number
          example: 123
          description: The user's unique identifier from memberService
        email_verified:
          type: boolean
          description: Indicates whether the user has verified their email address
          example: false
        app_metadata:
          type: object
          properties:
            cxa_clientid:
              type: string
              example: identity-local
            role:
              type: string
              example: Admin
          description: The user's app meta data
        status:
          type: string
          description: User status (DEACTIVATED has not been implemented yet)
          enum:
            - CREATED
            - VERIFIED
            - DEACTIVATED
            - ACTIVE
            - LOCKED
            - UNLOCKED
        created_at:
          type: string
          description: The date when the user was created
        updated_at:
          type: string
          description: The date when the user was last updated (modified)
        limitedAccessUntil:
          type: string
          description: limited access until date (follow ISO 8601 format)
          example: '2020-03-12T23:59:59Z'
        phone:
          type: string
          example: '+84123456789'
          description: The user's phone number
    ImportUserRequestBody:
      type: array
      items:
        $ref: '#/components/schemas/ImportUserDetail'
    ImportUserDetail:
      type: object
      required:
        - email
        - email_verified
      properties:
        email:
          type: string
          example: john.doe@contoso.com
          description: The user's email address
          format: email
        email_verified:
          type: boolean
          description: Indicates whether the user has verified their email address
          example: false
        password:
          type: string
          description: User's Password
          example: secretpassword
        blocked:
          type: boolean
          description: Indicates whether the user has been blocked
        app_metadata:
          type: object
          description: >-
            Data related to the user that does affect the application's core
            functionality
          example:
            roles:
              - admin
            plan:
              - premium
        user_metadata:
          type: object
          description: >-
            Data related to the user that does not affect the application's core
            functionality
          example:
            theme: light
    SucessResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - success
            - fail
          description: Status
          example: success
    ErrorResponse:
      type: object
      properties:
        statusCode:
          type: integer
          description: Status Code
          example: 404
        error:
          type: string
          description: The error
          example: Not Found
        message:
          type: string
          description: Error message
          example: The user does not exist
    ErrorInvalidEmaillAddressResponse:
      type: object
      properties:
        message:
          type: string
          description: Invalid email address
          example: Invalid email address
    ErrorEmailExistsResponse:
      type: object
      properties:
        message:
          type: string
          description: Email exists
          example: Email exists
